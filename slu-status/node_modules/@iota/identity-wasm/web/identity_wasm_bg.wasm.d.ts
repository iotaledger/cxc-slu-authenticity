/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_did_free(a: number): void;
export function did_new(a: number, b: number, c: number, d: number): void;
export function did_fromBase58(a: number, b: number, c: number, d: number, e: number): void;
export function did_parse(a: number, b: number, c: number): void;
export function did_network(a: number, b: number): void;
export function did_network_name(a: number, b: number): void;
export function did_tag(a: number, b: number): void;
export function did_join(a: number, b: number, c: number, d: number): void;
export function did_toUrl(a: number): number;
export function did_intoUrl(a: number): number;
export function did_toString(a: number, b: number): void;
export function __wbg_didurl_free(a: number): void;
export function didurl_parse(a: number, b: number, c: number): void;
export function didurl_did(a: number): number;
export function didurl_url_str(a: number, b: number): void;
export function didurl_fragment(a: number, b: number): void;
export function didurl_set_fragment(a: number, b: number, c: number, d: number): void;
export function didurl_path(a: number, b: number): void;
export function didurl_set_path(a: number, b: number, c: number, d: number): void;
export function didurl_query(a: number, b: number): void;
export function didurl_set_query(a: number, b: number, c: number, d: number): void;
export function didurl_join(a: number, b: number, c: number, d: number): void;
export function didurl_toString(a: number, b: number): void;
export function __wbg_documenthistory_free(a: number): void;
export function documenthistory_integrationChainData(a: number): number;
export function documenthistory_integrationChainSpam(a: number): number;
export function documenthistory_diffChainData(a: number): number;
export function documenthistory_diffChainSpam(a: number): number;
export function documenthistory_toJSON(a: number, b: number): void;
export function documenthistory_fromJSON(a: number, b: number): void;
export function __wbg_integrationchainhistory_free(a: number): void;
export function __wbg_diffchainhistory_free(a: number): void;
export function integrationchainhistory_chainData(a: number): number;
export function integrationchainhistory_spam(a: number): number;
export function integrationchainhistory_toJSON(a: number, b: number): void;
export function integrationchainhistory_fromJSON(a: number, b: number): void;
export function diffchainhistory_chainData(a: number): number;
export function diffchainhistory_spam(a: number): number;
export function diffchainhistory_toJSON(a: number, b: number): void;
export function diffchainhistory_fromJSON(a: number, b: number): void;
export function __wbg_client_free(a: number): void;
export function client_new(a: number): void;
export function client_fromConfig(a: number, b: number): void;
export function client_fromNetwork(a: number, b: number): void;
export function client_network(a: number): number;
export function client_publishDocument(a: number, b: number, c: number): void;
export function client_publishDiff(a: number, b: number, c: number, d: number, e: number): void;
export function client_publishJSON(a: number, b: number, c: number, d: number, e: number): void;
export function client_resolve(a: number, b: number, c: number, d: number): void;
export function client_resolveHistory(a: number, b: number, c: number, d: number): void;
export function client_resolveDiffHistory(a: number, b: number, c: number): void;
export function client_checkCredential(a: number, b: number, c: number, d: number): void;
export function client_checkPresentation(a: number, b: number, c: number, d: number): void;
export function __wbg_timestamp_free(a: number): void;
export function timestamp_parse(a: number, b: number, c: number): void;
export function timestamp_nowUTC(): number;
export function timestamp_toRFC3339(a: number, b: number): void;
export function __wbg_verifiablepresentation_free(a: number): void;
export function verifiablepresentation_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function verifiablepresentation_toJSON(a: number, b: number): void;
export function verifiablepresentation_fromJSON(a: number, b: number): void;
export function __wbg_keycollection_free(a: number): void;
export function keycollection_new(a: number, b: number, c: number): void;
export function keycollection_length(a: number): number;
export function keycollection_isEmpty(a: number): number;
export function keycollection_keypair(a: number, b: number): number;
export function keycollection_public(a: number, b: number, c: number): void;
export function keycollection_private(a: number, b: number, c: number): void;
export function keycollection_merkleRoot(a: number, b: number, c: number): void;
export function keycollection_merkleProof(a: number, b: number, c: number, d: number): void;
export function keycollection_toJSON(a: number, b: number): void;
export function keycollection_fromJSON(a: number, b: number): void;
export function __wbg_service_free(a: number): void;
export function service_toJSON(a: number, b: number): void;
export function service_fromJSON(a: number, b: number): void;
export function __wbg_config_free(a: number): void;
export function config_new(): number;
export function config_fromNetwork(a: number, b: number): void;
export function config_setNetwork(a: number, b: number, c: number): void;
export function config_setNode(a: number, b: number, c: number, d: number): void;
export function config_setPrimaryNode(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function config_setPrimaryPoWNode(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function config_setPermanode(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function config_setNodeAuth(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function config_setNodeSyncInterval(a: number, b: number, c: number): void;
export function config_setNodeSyncDisabled(a: number, b: number): void;
export function config_setQuorum(a: number, b: number, c: number): void;
export function config_setQuorumSize(a: number, b: number, c: number): void;
export function config_setQuorumThreshold(a: number, b: number, c: number): void;
export function config_setLocalPoW(a: number, b: number, c: number): void;
export function config_setTipsInterval(a: number, b: number, c: number): void;
export function config_setRequestTimeout(a: number, b: number, c: number): void;
export function start(): void;
export function __wbg_document_free(a: number): void;
export function document_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function document_fromAuthentication(a: number, b: number): void;
export function document_id(a: number): number;
export function document_created(a: number): number;
export function document_set_created(a: number, b: number): void;
export function document_updated(a: number): number;
export function document_set_updated(a: number, b: number): void;
export function document_proof(a: number, b: number): void;
export function document_authentication(a: number): number;
export function document_message_id(a: number, b: number): void;
export function document_set_message_id(a: number, b: number, c: number, d: number): void;
export function document_previous_message_id(a: number, b: number): void;
export function document_set_previous_message_id(a: number, b: number, c: number, d: number): void;
export function document_insertMethod(a: number, b: number, c: number, d: number, e: number): void;
export function document_removeMethod(a: number, b: number, c: number): void;
export function document_insertService(a: number, b: number, c: number): void;
export function document_removeService(a: number, b: number, c: number): void;
export function document_sign(a: number, b: number, c: number): void;
export function document_verify(a: number): number;
export function document_signCredential(a: number, b: number, c: number, d: number): void;
export function document_signPresentation(a: number, b: number, c: number, d: number): void;
export function document_signData(a: number, b: number, c: number, d: number): void;
export function document_verifyData(a: number, b: number, c: number): void;
export function document_resolveKey(a: number, b: number, c: number, d: number): void;
export function document_revokeMerkleKey(a: number, b: number, c: number, d: number, e: number): void;
export function document_diff(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function document_merge(a: number, b: number, c: number): void;
export function document_integrationIndex(a: number, b: number): void;
export function document_diffIndex(a: number, b: number, c: number): void;
export function document_toJSON(a: number, b: number): void;
export function document_fromJSON(a: number, b: number): void;
export function __wbg_network_free(a: number): void;
export function network_try_from_name(a: number, b: number, c: number): void;
export function network_mainnet(): number;
export function network_devnet(): number;
export function network_default_node_url(a: number, b: number): void;
export function network_explorer_url(a: number, b: number): void;
export function network_messageURL(a: number, b: number, c: number, d: number): void;
export function network_toString(a: number, b: number): void;
export function __wbg_verifiablecredential_free(a: number): void;
export function verifiablecredential_extend(a: number, b: number): void;
export function verifiablecredential_issue(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function verifiablecredential_toJSON(a: number, b: number): void;
export function verifiablecredential_fromJSON(a: number, b: number): void;
export function __wbg_verificationmethod_free(a: number): void;
export function verificationmethod_new(a: number, b: number, c: number, d: number): void;
export function verificationmethod_fromDID(a: number, b: number, c: number, d: number, e: number): void;
export function verificationmethod_createMerkleKey(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function verificationmethod_id(a: number): number;
export function verificationmethod_controller(a: number): number;
export function verificationmethod_type_(a: number, b: number): void;
export function verificationmethod_data(a: number, b: number): void;
export function verificationmethod_toJSON(a: number, b: number): void;
export function verificationmethod_fromJSON(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_new(a: number, b: number): void;
export function keypair_fromBase58(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function keypair_public(a: number, b: number): void;
export function keypair_private(a: number, b: number): void;
export function keypair_toJSON(a: number, b: number): void;
export function keypair_fromJSON(a: number, b: number): void;
export function __wbg_documentdiff_free(a: number): void;
export function documentdiff_id(a: number): number;
export function documentdiff_did(a: number): number;
export function documentdiff_diff(a: number, b: number): void;
export function documentdiff_message_id(a: number, b: number): void;
export function documentdiff_set_message_id(a: number, b: number, c: number, d: number): void;
export function documentdiff_previous_message_id(a: number, b: number): void;
export function documentdiff_set_previous_message_id(a: number, b: number, c: number, d: number): void;
export function documentdiff_proof(a: number, b: number): void;
export function documentdiff_merge(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h333b8cc9289bf565(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h743008b6e6c0fdd7(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h4ec174668ab80a84(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
