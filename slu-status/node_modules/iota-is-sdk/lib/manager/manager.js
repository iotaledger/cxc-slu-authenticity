"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const mongodb_1 = require("mongodb");
const crypto = require('crypto');
class Manager {
    constructor(config) {
        this.config = config;
        this.client = new mongodb_1.MongoClient(this.config.mongoURL);
        this.connected = false;
    }
    /*
    */
    setRole(id, role) {
        return __awaiter(this, void 0, void 0, function* () {
            this.tryConnect();
            const database = this.client.db(this.config.databaseName);
            const users = database.collection("users");
            const user = yield users.findOneAndUpdate({
                id
            }, {
                $set: { role }
            }, {
                upsert: false
            });
            yield this.close();
            return !!user;
        });
    }
    tryConnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.connected) {
                return;
            }
            yield this.client.connect();
            this.connected = true;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.close();
            this.connected = false;
        });
    }
}
exports.Manager = Manager;
//# sourceMappingURL=manager.js.map