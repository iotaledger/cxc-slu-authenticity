"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const crypto = require('crypto');
const ed = __importStar(require("@noble/ed25519"));
const bs58 = __importStar(require("bs58"));
const apiVersion_1 = require("../models/apiVersion");
const axios_1 = __importDefault(require("axios"));
/**
 * This is the base client used as a parent class for all clients
 * using the integration services api.
 */
class BaseClient {
    // Default config is a local api without an api key
    constructor({ apiKey, baseUrl, apiVersion } = {}) {
        this.apiKey = apiKey || '';
        this.baseUrl = baseUrl || 'http://127.0.0.1:3000';
        this.apiVersion = apiVersion || apiVersion_1.ApiVersion.v01;
        // Configure request timeout to 2 min because tangle might be slow
        this.instance = axios_1.default.create({
            timeout: 120000
        });
    }
    /**
     * Authenticates the user to the api for requests where authentication is needed
     * @param id of the user to authenticate
     * @param secretKey of the user to authenticate
     */
    authenticate(id, secretKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = yield this.get(`authentication/prove-ownership/${id}`);
            const nonce = body === null || body === void 0 ? void 0 : body.nonce;
            const encodedKey = yield this.getHexEncodedKey(secretKey);
            const signedNonce = yield this.signNonce(encodedKey, nonce);
            const { jwt } = yield this.post(`authentication/prove-ownership/${id}`, {
                signedNonce
            });
            this.jwtToken = jwt;
        });
    }
    signNonce(privateKey, nonce) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((nonce === null || nonce === void 0 ? void 0 : nonce.length) !== 40) {
                throw new Error('nonce must have a length of 40 characters!');
            }
            const hash = yield this.hashNonce(nonce);
            const signedHash = yield ed.sign(hash, privateKey);
            return ed.Signature.fromHex(signedHash).toHex();
        });
    }
    hashNonce(nonce) {
        return __awaiter(this, void 0, void 0, function* () {
            const encoder = new TextEncoder();
            const data = encoder.encode(nonce);
            return crypto.createHash('sha256').update(data).digest('hex');
        });
    }
    getHexEncodedKey(base58Key) {
        return bs58.decode(base58Key).toString('hex');
    }
    post(url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = yield this.instance.request({
                method: 'post',
                url: `${this.baseUrl}/api/${this.apiVersion}/${url}`,
                params: {
                    'api-key': this.apiKey
                },
                data,
                headers: this.jwtToken ? { Authorization: `Bearer ${this.jwtToken}` } : {}
            });
            return response === null || response === void 0 ? void 0 : response.data;
        });
    }
    get(url, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            params['api-key'] = this.apiKey;
            let response = yield this.instance.request({
                method: 'get',
                url: `${this.baseUrl}/api/${this.apiVersion}/${url}`,
                params,
                headers: this.jwtToken ? { Authorization: `Bearer ${this.jwtToken}` } : {}
            });
            return response === null || response === void 0 ? void 0 : response.data;
        });
    }
    delete(url, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            params['api-key'] = this.apiKey;
            let response = yield this.instance.request({
                method: 'delete',
                url: `${this.baseUrl}/api/${this.apiVersion}/${url}`,
                params,
                headers: this.jwtToken ? { Authorization: `Bearer ${this.jwtToken}` } : {}
            });
            return response === null || response === void 0 ? void 0 : response.data;
        });
    }
    put(url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = yield this.instance.request({
                method: 'put',
                url: `${this.baseUrl}/api/${this.apiVersion}/${url}`,
                params: {
                    'api-key': this.apiKey
                },
                data,
                headers: this.jwtToken ? { Authorization: `Bearer ${this.jwtToken}` } : {}
            });
            return response === null || response === void 0 ? void 0 : response.data;
        });
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=base.js.map