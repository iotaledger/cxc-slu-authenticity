import { Static } from '@sinclair/typebox';
import { ClaimSchema } from '../schemas/request-response-body/verification-bodies';
import { IdentitySchema } from '../schemas/user';
import { OrganizationSchema, ServiceSchema, PersonSchema, ProductSchema, DeviceSchema } from '../schemas/user-types';
export declare type IdentityClaim = Static<typeof ClaimSchema>;
export declare type User = Static<typeof IdentitySchema>;
export declare type Organization = Static<typeof OrganizationSchema>;
export declare type Service = Static<typeof ServiceSchema>;
export declare type Person = Static<typeof PersonSchema>;
export declare type Product = Static<typeof ProductSchema>;
export declare type Device = Static<typeof DeviceSchema>;
export declare enum UserType {
    Organization = "Organization",
    Service = "Service",
    Person = "Person",
    Device = "Device",
    Product = "Product",
    Unknown = "Unknown"
}
export declare enum UserRoles {
    Admin = "Admin",
    Manager = "Manager",
    User = "User"
}
export interface UserSearch {
    username?: string;
    registrationDate?: Date;
    type?: UserType | string;
    limit?: number;
    index?: number;
}
declare type OmittedUser = Omit<User, 'registrationDate' | 'role'>;
export interface UserPersistence extends OmittedUser {
    role?: UserRoles;
    registrationDate?: Date;
}
export {};
//# sourceMappingURL=user.d.ts.map