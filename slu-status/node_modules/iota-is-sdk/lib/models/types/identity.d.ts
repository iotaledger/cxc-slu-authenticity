import * as Identity from '@iota/identity-wasm/node';
import { Static } from '@sinclair/typebox';
import { VerifiableCredentialSchema, VerifiableCredentialSubjectSchema, IdentityDocumentJsonSchema, IdentityKeyPairJsonSchema, DocumentJsonUpdateSchema, IdentityJsonSchema, IdentityJsonUpdateSchema, LatestIdentityJsonSchema } from '../schemas/identity';
import { CreateIdentityBodySchema } from '../schemas/request-response-body/identity-bodies';
import { IdentitySchema } from '../schemas/user';
export interface Credential<T> {
    id: string;
    type: string;
    subject: T;
}
export interface IdentityDocument extends Identity.Document {
    doc: Identity.Document;
    key: Identity.KeyPair;
}
export declare type IdentityInternal = Static<typeof IdentitySchema>;
export declare type CreateIdentityBody = Static<typeof CreateIdentityBodySchema>;
export declare type VerifiableCredentialJson = Static<typeof VerifiableCredentialSchema>;
export declare type CredentialSubject = Static<typeof VerifiableCredentialSubjectSchema>;
export declare type IdentityDocumentJson = Static<typeof IdentityDocumentJsonSchema>;
export declare type LatestIdentityJson = Static<typeof LatestIdentityJsonSchema>;
export declare type IdentityKeyPairJson = Static<typeof IdentityKeyPairJsonSchema>;
export declare type DocumentJsonUpdate = Static<typeof DocumentJsonUpdateSchema>;
export declare type IdentityJson = Static<typeof IdentityJsonSchema>;
export declare type IdentityJsonUpdate = Static<typeof IdentityJsonUpdateSchema>;
export interface IdentityKeys {
    id: string;
    key: IdentityKeyPairJson;
}
//# sourceMappingURL=identity.d.ts.map