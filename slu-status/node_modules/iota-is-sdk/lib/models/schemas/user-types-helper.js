"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrandSchema = exports.PostalAddressSchema = exports.DistanceSchema = exports.ServiceChannelSchema = exports.QuantitativeValueSchema = exports.ReviewSchema = exports.ReviewRatingSchema = exports.AggregateRatingSchema = exports.AggregateOfferSchema = exports.DemandSchema = exports.OfferSchema = exports.StructuredValueSchema = exports.ThingSchema = exports.ThingObject = exports.ItemAvailability = exports.OfferItemConidition = exports.DeviceProtocol = exports.DeviceDirection = exports.DeviceControlledProperty = exports.ProductEnum = exports.schemaDescriptionCreator = void 0;
const typebox_1 = require("@sinclair/typebox");
const schemaDescriptionCreator = (name) => `${name} schema, see the specification at: https://schema.org/${name}`;
exports.schemaDescriptionCreator = schemaDescriptionCreator;
var ProductEnum;
(function (ProductEnum) {
    ProductEnum["actuator"] = "actuator";
    ProductEnum["beacon"] = "beacon";
    ProductEnum["endgun"] = "endgun";
    ProductEnum["HVAC"] = "HVAC";
    ProductEnum["implement"] = "implement";
    ProductEnum["irrSection"] = "irrSection";
    ProductEnum["irrSystem"] = "irrSystem";
    ProductEnum["meter"] = "meter";
    ProductEnum["multimedia"] = "multimedia";
    ProductEnum["network"] = "network";
    ProductEnum["sensor"] = "sensor";
})(ProductEnum = exports.ProductEnum || (exports.ProductEnum = {}));
var DeviceControlledProperty;
(function (DeviceControlledProperty) {
    DeviceControlledProperty["airPollution"] = "airPollution";
    DeviceControlledProperty["atmosphericPressure"] = "atmosphericPressure";
    DeviceControlledProperty["cdom"] = "cdom";
    DeviceControlledProperty["conductance"] = "conductance";
    DeviceControlledProperty["conductivity"] = "conductivity";
    DeviceControlledProperty["depth"] = "depth";
    DeviceControlledProperty["eatingActivity"] = "eatingActivity";
    DeviceControlledProperty["electricityConsumption"] = "electricityConsumption";
    DeviceControlledProperty["energy"] = "energy";
    DeviceControlledProperty["fillingLevel"] = "fillingLevel";
    DeviceControlledProperty["freeChlorine"] = "freeChlorine";
    DeviceControlledProperty["gasComsumption"] = "gasComsumption";
    DeviceControlledProperty["heading"] = "heading";
    DeviceControlledProperty["humidity"] = "humidity";
    DeviceControlledProperty["light"] = "light";
    DeviceControlledProperty["location"] = "location";
    DeviceControlledProperty["milking"] = "milking";
    DeviceControlledProperty["motion"] = "motion";
    DeviceControlledProperty["movementActivity"] = "movementActivity";
    DeviceControlledProperty["noiseLevel"] = "noiseLevel";
    DeviceControlledProperty["occupancy"] = "occupancy";
    DeviceControlledProperty["orp"] = "orp";
    DeviceControlledProperty["pH"] = "pH";
    DeviceControlledProperty["power"] = "power";
    DeviceControlledProperty["precipitation"] = "precipitation";
    DeviceControlledProperty["pressure"] = "pressure";
    DeviceControlledProperty["refractiveIndex"] = "refractiveIndex";
    DeviceControlledProperty["salinity"] = "salinity";
    DeviceControlledProperty["smoke"] = "smoke";
    DeviceControlledProperty["soilMoisture"] = "soilMoisture";
    DeviceControlledProperty["solarRadiation"] = "solarRadiation";
    DeviceControlledProperty["speed"] = "speed";
    DeviceControlledProperty["tds"] = "tds";
    DeviceControlledProperty["temperature"] = "temperature";
    DeviceControlledProperty["tss"] = "tss";
    DeviceControlledProperty["turbidity"] = "turbidity";
    DeviceControlledProperty["waterConsumption"] = "waterConsumption";
    DeviceControlledProperty["waterPollution"] = "waterPollution";
    DeviceControlledProperty["weatherConditions"] = "weatherConditions";
    DeviceControlledProperty["weight"] = "weight";
    DeviceControlledProperty["windDirection"] = "windDirection";
    DeviceControlledProperty["windSpeed"] = "windSpeed";
})(DeviceControlledProperty = exports.DeviceControlledProperty || (exports.DeviceControlledProperty = {}));
var DeviceDirection;
(function (DeviceDirection) {
    DeviceDirection["Inlet"] = "Inlet";
    DeviceDirection["Outlet"] = "Outlet";
    DeviceDirection["Entry"] = "Entry";
    DeviceDirection["Exit"] = "Exit";
})(DeviceDirection = exports.DeviceDirection || (exports.DeviceDirection = {}));
var DeviceProtocol;
(function (DeviceProtocol) {
    DeviceProtocol["3g"] = "3g";
    DeviceProtocol["bluetooth"] = "bluetooth";
    DeviceProtocol["bluetooth LE"] = "bluetooth LE";
    DeviceProtocol["cat-m"] = "cat-m";
    DeviceProtocol["coap"] = "coap";
    DeviceProtocol["ec-gsm-iot"] = "ec-gsm-iot";
    DeviceProtocol["gprs"] = "gprs";
    DeviceProtocol["http"] = "http";
    DeviceProtocol["lwm2m"] = "lwm2m";
    DeviceProtocol["lora"] = "lora";
    DeviceProtocol["lte-m"] = "lte-m";
    DeviceProtocol["mqtt"] = "mqtt";
    DeviceProtocol["nb-iot"] = "nb-iot";
    DeviceProtocol["onem2m"] = "onem2m";
    DeviceProtocol["sigfox"] = "sigfox";
    DeviceProtocol["ul20"] = "ul20";
    DeviceProtocol["websocket"] = "websocket";
})(DeviceProtocol = exports.DeviceProtocol || (exports.DeviceProtocol = {}));
var OfferItemConidition;
(function (OfferItemConidition) {
    OfferItemConidition["DamagedCondition"] = "DamagedCondition";
    OfferItemConidition["NewCondition"] = "NewCondition";
    OfferItemConidition["RefurbishedCondition"] = "RefurbishedCondition";
    OfferItemConidition["UsedCondition"] = "UsedCondition";
})(OfferItemConidition = exports.OfferItemConidition || (exports.OfferItemConidition = {}));
var ItemAvailability;
(function (ItemAvailability) {
    ItemAvailability["BackOrder"] = "BackOrder";
    ItemAvailability["Discontinued"] = "Discontinued";
    ItemAvailability["InStock"] = "InStock";
    ItemAvailability["InStoreOnly"] = "InStoreOnly";
    ItemAvailability["LimitedAvailability"] = "LimitedAvailability";
    ItemAvailability["OnlineOnly"] = "OnlineOnly";
    ItemAvailability["OutOfStock"] = "OutOfStock";
    ItemAvailability["PreOrder"] = "PreOrder";
    ItemAvailability["PreSale"] = "PreSale";
    ItemAvailability["SoldOut"] = "SoldOut";
})(ItemAvailability = exports.ItemAvailability || (exports.ItemAvailability = {}));
exports.ThingObject = {
    '@context': typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 })),
    type: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 })),
    alternateName: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.Optional(typebox_1.Type.String()),
    description: typebox_1.Type.Optional(typebox_1.Type.String()),
    url: typebox_1.Type.Optional(typebox_1.Type.String()),
    image: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Array(typebox_1.Type.String())])),
    sameAs: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Array(typebox_1.Type.String())]))
};
exports.ThingSchema = typebox_1.Type.Object(Object.assign({}, exports.ThingObject));
exports.StructuredValueSchema = typebox_1.Type.Object(Object.assign({}, exports.ThingObject), { description: (0, exports.schemaDescriptionCreator)('StructuredValue') });
exports.OfferSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { availability: typebox_1.Type.Optional(typebox_1.Type.Enum(ItemAvailability)), availabilityEnds: typebox_1.Type.Optional(typebox_1.Type.String()), availabilityStarts: typebox_1.Type.Optional(typebox_1.Type.String()), businessFunction: typebox_1.Type.Optional(typebox_1.Type.String()), category: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), exports.ThingSchema])), material: typebox_1.Type.Optional(typebox_1.Type.String()), offeredBy: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), exports.ThingSchema])), gtin: typebox_1.Type.Optional(typebox_1.Type.String()), price: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), priceCurrency: typebox_1.Type.Optional(typebox_1.Type.String()), priceValidUntil: typebox_1.Type.Optional(typebox_1.Type.String()), itemCondition: typebox_1.Type.Optional(typebox_1.Type.Enum(OfferItemConidition)), itemOffered: typebox_1.Type.Optional(exports.ThingSchema), seller: typebox_1.Type.Optional(exports.ThingSchema), serialNumber: typebox_1.Type.Optional(typebox_1.Type.String()), validFrom: typebox_1.Type.Optional(typebox_1.Type.String()), validThrough: typebox_1.Type.Optional(typebox_1.Type.String()) }), { description: (0, exports.schemaDescriptionCreator)('Offer') });
exports.DemandSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { availability: typebox_1.Type.Optional(typebox_1.Type.Enum(ItemAvailability)), availabilityEnds: typebox_1.Type.Optional(typebox_1.Type.String()), availabilityStarts: typebox_1.Type.Optional(typebox_1.Type.String()), businessFunction: typebox_1.Type.Optional(typebox_1.Type.String()), gtin: typebox_1.Type.Optional(typebox_1.Type.String()), itemCondition: typebox_1.Type.Optional(typebox_1.Type.Enum(OfferItemConidition)), itemOffered: typebox_1.Type.Optional(exports.ThingSchema), seller: typebox_1.Type.Optional(exports.ThingSchema), serialNumber: typebox_1.Type.Optional(typebox_1.Type.String()), validFrom: typebox_1.Type.Optional(typebox_1.Type.String()), validThrough: typebox_1.Type.Optional(typebox_1.Type.String()) }), { description: (0, exports.schemaDescriptionCreator)('Demand') });
exports.AggregateOfferSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { highPrice: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), lowPrice: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), offerCount: typebox_1.Type.Optional(typebox_1.Type.Number()), offers: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Union([exports.OfferSchema, exports.DemandSchema]))) }), { description: (0, exports.schemaDescriptionCreator)('AggregateOffer') });
exports.AggregateRatingSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { author: typebox_1.Type.Optional(exports.ThingSchema), bestRating: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), worstRating: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), itemReviewed: typebox_1.Type.Optional(exports.ThingSchema), ratingExplanation: typebox_1.Type.Optional(typebox_1.Type.String()), ratingValue: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), reviewCount: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])) }), { description: (0, exports.schemaDescriptionCreator)('AggregateRating') });
exports.ReviewRatingSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { author: typebox_1.Type.Optional(exports.ThingSchema), bestRating: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), ratingExplanation: typebox_1.Type.Optional(typebox_1.Type.String()), ratingValue: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), reviewAspect: typebox_1.Type.Optional(typebox_1.Type.String()), worstRating: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])) }), { description: (0, exports.schemaDescriptionCreator)('Rating') });
exports.ReviewSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { itemReviewed: typebox_1.Type.Optional(exports.ThingSchema), reviewAspect: typebox_1.Type.Optional(typebox_1.Type.String()), reviewBody: typebox_1.Type.Optional(typebox_1.Type.String()), reviewRating: exports.ReviewRatingSchema }), { description: (0, exports.schemaDescriptionCreator)('Review') });
exports.QuantitativeValueSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { maxValue: typebox_1.Type.Optional(typebox_1.Type.Number()), minValue: typebox_1.Type.Optional(typebox_1.Type.Number()), unitCode: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number()])), unitText: typebox_1.Type.Optional(typebox_1.Type.String()), value: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Number(), typebox_1.Type.Boolean(), exports.StructuredValueSchema])) }), { description: (0, exports.schemaDescriptionCreator)('QuantitativeValue') });
exports.ServiceChannelSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { availableLanguage: typebox_1.Type.Optional(typebox_1.Type.String()), serviceUrl: typebox_1.Type.Optional(typebox_1.Type.String()) }));
exports.DistanceSchema = typebox_1.Type.Object(Object.assign({}, exports.ThingObject), { description: (0, exports.schemaDescriptionCreator)('Distance') });
exports.PostalAddressSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { addressCountry: typebox_1.Type.Optional(typebox_1.Type.String()), addressLocality: typebox_1.Type.Optional(typebox_1.Type.String()), addressRegion: typebox_1.Type.Optional(typebox_1.Type.String()), postOfficeBoxNumber: typebox_1.Type.Optional(typebox_1.Type.String()), postalCode: typebox_1.Type.Optional(typebox_1.Type.String()), streetAddress: typebox_1.Type.Optional(typebox_1.Type.String()) }), { description: (0, exports.schemaDescriptionCreator)('PostalAddress') });
exports.BrandSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, exports.ThingObject), { aggregateRating: typebox_1.Type.Optional(exports.AggregateRatingSchema), logo: typebox_1.Type.Optional(typebox_1.Type.String()), review: typebox_1.Type.Optional(exports.ThingSchema), slogan: typebox_1.Type.Optional(typebox_1.Type.String()) }), { description: (0, exports.schemaDescriptionCreator)('Brand') });
//# sourceMappingURL=user-types-helper.js.map