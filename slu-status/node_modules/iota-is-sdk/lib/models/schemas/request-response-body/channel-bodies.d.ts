export declare const CreateChannelBodySchema: import("@sinclair/typebox").TObject<{
    subscriptionPassword: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    topics: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TString;
        source: import("@sinclair/typebox").TString;
    }>>;
    hasPresharedKey: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    seed: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    presharedKey: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export declare const CreateChannelResponseSchema: import("@sinclair/typebox").TObject<{
    seed: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    channelAddress: import("@sinclair/typebox").TString;
    presharedKey: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export declare const AddChannelLogBodySchema: import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    created: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    publicPayload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    payload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
}>;
export declare const ReimportBodySchema: import("@sinclair/typebox").TObject<{
    seed: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    subscriptionPassword: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export declare const ChannelLogSchema: import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    created: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    publicPayload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    payload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
}>;
export declare const ChannelDataSchema: import("@sinclair/typebox").TObject<{
    link: import("@sinclair/typebox").TString;
    imported: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    messageId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    log: import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        created: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
        publicPayload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
        payload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    }>;
}>;
export declare const ValidateBodySchema: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
    link: import("@sinclair/typebox").TString;
    imported: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    messageId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    log: import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        created: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
        publicPayload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
        payload: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    }>;
}>>;
export declare const ValidateResponseSchema: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
    link: import("@sinclair/typebox").TString;
    isValid: import("@sinclair/typebox").TBoolean;
    error: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    tangleLog: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
}>>;
//# sourceMappingURL=channel-bodies.d.ts.map