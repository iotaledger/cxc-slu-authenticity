import { UserType } from '../../types/user';
export declare const VerifiableCredentialBodySchema: import("@sinclair/typebox").TObject<{
    '@context': import("@sinclair/typebox").TString;
    id: import("@sinclair/typebox").TString;
    type: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    credentialSubject: import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TString;
        type: import("@sinclair/typebox").TString;
        initiatorId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>;
    issuer: import("@sinclair/typebox").TString;
    issuanceDate: import("@sinclair/typebox").TString;
    proof: import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TString;
        verificationMethod: import("@sinclair/typebox").TString;
        signatureValue: import("@sinclair/typebox").TString;
    }>;
}>;
export declare const ClaimSchema: import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TEnum<import("@sinclair/typebox").TEnumKey<UserType>[]>, import("@sinclair/typebox").TString]>;
}>;
export declare const SubjectBodySchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    credentialType: import("@sinclair/typebox").TString;
    claim: import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TEnum<import("@sinclair/typebox").TEnumKey<UserType>[]>, import("@sinclair/typebox").TString]>;
    }>;
}>;
export declare const VerifyIdentityBodySchema: import("@sinclair/typebox").TObject<{
    subject: import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TString;
        credentialType: import("@sinclair/typebox").TString;
        claim: import("@sinclair/typebox").TObject<{
            type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TEnum<import("@sinclair/typebox").TEnumKey<UserType>[]>, import("@sinclair/typebox").TString]>;
        }>;
    }>;
    initiatorVC: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        '@context': import("@sinclair/typebox").TString;
        id: import("@sinclair/typebox").TString;
        type: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        credentialSubject: import("@sinclair/typebox").TObject<{
            id: import("@sinclair/typebox").TString;
            type: import("@sinclair/typebox").TString;
            initiatorId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>;
        issuer: import("@sinclair/typebox").TString;
        issuanceDate: import("@sinclair/typebox").TString;
        proof: import("@sinclair/typebox").TObject<{
            type: import("@sinclair/typebox").TString;
            verificationMethod: import("@sinclair/typebox").TString;
            signatureValue: import("@sinclair/typebox").TString;
        }>;
    }>>;
}>;
export declare const RevokeVerificationBodySchema: import("@sinclair/typebox").TObject<{
    signatureValue: import("@sinclair/typebox").TString;
}>;
export declare const TrustedRootBodySchema: import("@sinclair/typebox").TObject<{
    trustedRootId: import("@sinclair/typebox").TString;
}>;
//# sourceMappingURL=verification-bodies.d.ts.map