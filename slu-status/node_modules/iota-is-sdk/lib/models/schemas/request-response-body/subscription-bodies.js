"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizeSubscriptionResponseSchema = exports.RequestSubscriptionResponseSchema = exports.RequestSubscriptionBodySchema = exports.RevokeSubscriptionBodySchema = exports.AuthorizeSubscriptionBodySchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const subscription_1 = require("../subscription");
exports.AuthorizeSubscriptionBodySchema = typebox_1.Type.Object({
    subscriptionLink: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 })),
    id: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 }))
});
exports.RevokeSubscriptionBodySchema = typebox_1.Type.Object({
    subscriptionLink: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 })),
    id: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1 }))
});
exports.RequestSubscriptionBodySchema = typebox_1.Type.Object({
    seed: typebox_1.Type.Optional(typebox_1.Type.String({
        minLength: 32,
        description: 'If left empty the api will generate a seed. Make sure you store the seed since the API will not store it. You can reuse your seed for different channels.'
    })),
    accessRights: typebox_1.Type.Optional(typebox_1.Type.Enum(subscription_1.AccessRights)),
    presharedKey: typebox_1.Type.Optional(typebox_1.Type.String({ maxLength: 32, minLength: 32 }))
});
exports.RequestSubscriptionResponseSchema = typebox_1.Type.Object({
    seed: typebox_1.Type.String({
        minLength: 32,
        maxLength: 72,
        description: 'Auto generated seed. Make sure you store the seed since the API will not store it. You can reuse your seed for different channels.'
    }),
    subscriptionLink: typebox_1.Type.String()
});
exports.AuthorizeSubscriptionResponseSchema = typebox_1.Type.Object({
    keyloadLink: typebox_1.Type.String()
});
//# sourceMappingURL=subscription-bodies.js.map