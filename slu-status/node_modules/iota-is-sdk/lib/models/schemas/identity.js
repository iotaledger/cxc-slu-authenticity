"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityJsonUpdateSchema = exports.DocumentJsonUpdateSchema = exports.IdentityJsonSchema = exports.IdentityKeyPairJsonSchema = exports.LatestIdentityJsonSchema = exports.IdentityDocumentJsonSchema = exports.VerifiableCredentialSchema = exports.VerifiableCredentialSubjectSchema = exports.Encoding = void 0;
const typebox_1 = require("@sinclair/typebox");
var Encoding;
(function (Encoding) {
    Encoding["base16"] = "base16";
    Encoding["base58"] = "base58";
    Encoding["base64"] = "base64";
})(Encoding = exports.Encoding || (exports.Encoding = {}));
exports.VerifiableCredentialSubjectSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
    type: typebox_1.Type.String({ minLength: 1 }),
    initiatorId: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 50, maxLength: 53 }))
});
exports.VerifiableCredentialSchema = typebox_1.Type.Object({
    '@context': typebox_1.Type.String(),
    id: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
    type: typebox_1.Type.Array(typebox_1.Type.String({ minLength: 1 })),
    credentialSubject: exports.VerifiableCredentialSubjectSchema,
    issuer: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
    issuanceDate: typebox_1.Type.String({ minLength: 1, format: 'date-time' }),
    proof: typebox_1.Type.Object({
        type: typebox_1.Type.String({ minLength: 1 }),
        verificationMethod: typebox_1.Type.String({ minLength: 1 }),
        signatureValue: typebox_1.Type.String({ minLength: 1 })
    })
});
exports.IdentityDocumentJsonSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
    verificationMethod: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        id: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
        controller: typebox_1.Type.String(),
        type: typebox_1.Type.String(),
        publicKeyBase58: typebox_1.Type.String()
    }))),
    previousMessageId: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 50, maxLength: 53 })),
    authentication: typebox_1.Type.Array(typebox_1.Type.Object({
        id: typebox_1.Type.String({ minLength: 50, maxLength: 53 }),
        controller: typebox_1.Type.String(),
        type: typebox_1.Type.String(),
        publicKeyBase58: typebox_1.Type.String()
    })),
    created: typebox_1.Type.String({ format: 'date-time', minLength: 1 }),
    updated: typebox_1.Type.String({ format: 'date-time', minLength: 1 }),
    immutable: typebox_1.Type.Boolean(),
    proof: typebox_1.Type.Object({
        type: typebox_1.Type.String(),
        verificationMethod: typebox_1.Type.String(),
        signatureValue: typebox_1.Type.String()
    })
});
exports.LatestIdentityJsonSchema = typebox_1.Type.Object({
    document: exports.IdentityDocumentJsonSchema,
    messageId: typebox_1.Type.String()
});
exports.IdentityKeyPairJsonSchema = typebox_1.Type.Object({
    type: typebox_1.Type.String(),
    public: typebox_1.Type.String(),
    secret: typebox_1.Type.String(),
    encoding: typebox_1.Type.Enum(Encoding)
});
exports.IdentityJsonSchema = typebox_1.Type.Object({
    doc: exports.IdentityDocumentJsonSchema,
    key: exports.IdentityKeyPairJsonSchema
});
exports.DocumentJsonUpdateSchema = typebox_1.Type.Object({
    doc: exports.IdentityDocumentJsonSchema,
    txHash: typebox_1.Type.String()
});
exports.IdentityJsonUpdateSchema = typebox_1.Type.Object({
    doc: exports.IdentityDocumentJsonSchema,
    key: exports.IdentityKeyPairJsonSchema,
    txHash: typebox_1.Type.String()
});
//# sourceMappingURL=identity.js.map